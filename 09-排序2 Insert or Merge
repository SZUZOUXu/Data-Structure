#include<stdio.h>
#include<stdlib.h>
#define MaxSize 100

void Input(int A[], int A1[], int B[], int B1[], int N);
void Insert_Judge(int A1[], int N, int B[],int* flag);/*判断是Insert还是Merge*/
void Insert_Sort(int B[], int N, int B1[]);/*一次迭代Insert_Sort*/
void Merge_Sort(int B[], int N, int B1[]);/*一次迭代Merge_Sort*/
void Merge(int B[], int TmpA[], int L, int R, int RightEnd);
void MPass(int B[], int TmpA[], int N, int length);

int main()
{
	int A[MaxSize];/*存储输入迭代前的元素*/
	int B[MaxSize];/*存储输入迭代后的元素*/
	int B1[MaxSize];/*用于再迭代一次B*/
	int A1[MaxSize];/*用于判别是Inser还是Merge*/
	int N, i;
	int flag = 0;
	scanf("%d", &N);
	Input(A, A1, B, B1, N);/*输入*/
	/*对A1数组进行Insert迭代,在A1和B相等时返回*/
	Insert_Judge(A1, N, B, &flag);
	if (flag) {
		printf("Merge Sort\n");
		Merge_Sort(B, N, B1);
	}
	else {
		printf("Insertion Sort\n");
		Insert_Sort(B, N, B1);
	}
	
	for (i = 0;i < N;i++) {/*输出*/
		if(!i)
			printf("%d", B[i]);
		else
			printf(" %d", B[i]);
	}
}
void Input(int A[], int A1[], int B[], int B1[], int N)
{
	int i;
	for (i = 0;i < N;i++) {
		scanf("%d", &A[i]);
		A1[i] = A[i];
	}

	for (i = 0;i < N;i++) {
		scanf("%d", &B[i]);
		B1[i] = B[i];
	}
}

void Insert_Judge(int A1[], int N, int B[], int* flag)
{
	int P, i, tmp;
	for (P = 1;P < N;P++) {
		*flag = 0;
		tmp = A1[P];
		for (i = P;i > 0 && A1[i - 1] > tmp;i--) {
			A1[i] = A1[i - 1];
		}
		A1[i] = tmp;
		for (i = 0;i < N;i++) {
			if (A1[i] != B[i]) {
				*flag = 1;
			}
		}
		if (!(*flag))
			break;
	}
}
void Insert_Sort(int B[], int N, int B1[])
{/*完成一次迭代*/
	int flag;
	int P, i, tmp;
	for (P = 1;P < N;P++) {
		flag = 0;
		tmp = B[P];
		for (i = P;i > 0 && B[i - 1] > tmp;i--) {
			B[i] = B[i - 1];
		}
		B[i] = tmp;
		for (i = 0;i < N;i++) {
			if (B[i] != B1[i]) {
				flag = 1;
			}
		}
		if (flag)
			break;
	}
}

void Merge_Sort(int B[], int N, int B1[])
{/*完成一次迭代*/
	int* TmpA;
	int length = 1;
	int i,flag = 0;
	TmpA = (int*)malloc(N * sizeof(int));
	if (TmpA != NULL) {
		while (length < N) {
			MPass(B, TmpA, N, length);
			length *= 2;
			for (i = 0;i < N;i++) {
				if (B[i] != B1[i]) {
					flag = 1;
				}
			}
			if (flag)
				break;
		}
	}
	else return;
}

void MPass(int B[], int TmpA[], int N, int length)
{
	int i, j;
	for (i = 0;i < N - 2 * length;i+=2*length) {
		Merge(B, TmpA, i, i + length, i + 2*length - 1);
	}
	if (i + length < N) {
		Merge(B, TmpA, i, i + length, N - 1);
	}
	else
		for (j = i;j < N;j++) {
			TmpA[j] = B[j];
		}
	for (i = N - 1;i >= 0;i--)
		B[i] = TmpA[i];/*再返回A*/
}

void Merge(int B[], int TmpA[], int L, int R, int RightEnd)
{
	int LeftEnd = R - 1;
	int Tmp = L;
	while (L <= LeftEnd && R <=RightEnd) {
		if (B[L] < B[R])
			TmpA[Tmp++] = B[L++];
		else
			TmpA[Tmp++] = B[R++];
	}
	while(L <= LeftEnd)
		TmpA[Tmp++] = B[L++];
	while (R <= RightEnd)
		TmpA[Tmp++] = B[R++];
}
