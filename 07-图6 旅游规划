#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#define MaxSize 500
#define INF 65535
typedef struct GNode* MGraph;
struct GNode {
	int Nv;
	int Ne;
	int G[MaxSize][MaxSize][2];
};
typedef struct ENode* Edge;
struct ENode {
	int V1, V2;
	int len;
	int mon;
};
int dist[MaxSize];
int path[MaxSize];
int cost[MaxSize];
bool collected[MaxSize];

MGraph CreateGraph(int N);
MGraph BuildGraph();
void InsertGraph(MGraph Graph, Edge E);
void Inisitalize();
int FindMinDist(MGraph Graph);
bool Dijikstra(MGraph Graph, int S);

int S, D;
int main()
{
	
	MGraph Graph;
	Graph = BuildGraph();
	Inisitalize();
	Dijikstra(Graph, S);

	printf("%d %d", dist[D], cost[D]);
	return 0;
}

MGraph CreateGraph(int N)
{
	MGraph Graph;
	int V, W;
	Graph = (MGraph)malloc(sizeof(struct GNode));

	Graph->Nv = N;
	Graph->Ne = 0;

	for(V = 0;V<Graph->Nv;V++)
		for (W = 0;W < Graph->Nv;W++) {
			Graph->G[V][W][0] = INF;
			Graph->G[V][W][1] = INF;
		}

	return Graph;
}
MGraph BuildGraph()
{
	MGraph Graph;
	Edge E;
	int N, i;
	scanf("%d", &N);
	Graph = CreateGraph(N);
	scanf("%d", &Graph->Ne);
	scanf("%d %d", &S, &D);
	for (i = 0;i < Graph->Ne;i++) {
		E = (Edge)malloc(sizeof(struct ENode));
		scanf("%d %d %d %d", &E->V1, &E->V2, &E->len, &E->mon);
		InsertGraph(Graph, E);
	}

	return Graph;
}

void InsertGraph(MGraph Graph, Edge E)
{
	Graph->G[E->V1][E->V2][0] = E->len;
	Graph->G[E->V2][E->V1][0] = E->len;
	Graph->G[E->V1][E->V2][1] = E->mon;
	Graph->G[E->V2][E->V1][1] = E->mon;
}

void Inisitalize()
{
	int i;
	for (i = 0;i < MaxSize;i++) {
		dist[i] = INF;
		path[i] = -1;
		cost[i] = INF;
		collected[i] = false;
	}
}

int FindMinDist(MGraph Graph)
{
	/*返回未被收录顶点中dist最小者*/
	int MinV, V;
	int MinDist = INF;
	for (V = 0;V < Graph->Nv;V++) {
		if (collected[V] == false && dist[V] < MinDist) {
			/*V未被收录且dist[V]更小*/
			MinDist = dist[V];/*更新最小距离*/
			MinV = V;/*更新顶点*/
		}
	}
	if (MinDist < INF) /* 若找到最小dist */
		return MinV; /* 返回对应的顶点下标 */
	else return -1;  /* 若这样的顶点不存在，返回错误标记 */
}

bool Dijikstra(MGraph Graph, int S)
{
	int V, W;
	/*遍历S的邻接点*/
	for (V = 0; V < Graph->Nv; V++) {
		dist[V] = Graph->G[S][V][0];/*存边的长度*/
		cost[V] = Graph->G[S][V][1];/*存边的价格*/
		if (dist[V] < INF)
			path[V] = S;/*路径更新*/
		else
			path[V] = -1;
		collected[V] = false;
	}
	/* 先将起点收入集合 */
	dist[S] = 0;
	collected[S] = true;
	while (1) {
		/* V = 未被收录顶点中dist最小者(S邻接点) */
		V = FindMinDist(Graph);
		if (V == -1) /* 这样的V不存在 */
			break;      
		collected[V] = true;  /* 收录V */
		for (W = 0; W < Graph->Nv; W++) /* 对图中的每个顶点W */
			/* 若W是V的邻接点并且未被收录 */
			if (collected[W] == false && Graph->G[V][W][0] < INF) {
				if (Graph->G[V][W][0] < 0) /* 若有负边 */
					return false; /* 不能正确解决，返回错误标记 */
				/* 若收录V使得dist[W]变小 */
				if (dist[V] + Graph->G[V][W][0] < dist[W]) {
					dist[W] = dist[V] + Graph->G[V][W][0];/* 更新dist[W] */
					cost[W] = cost[V] + Graph->G[V][W][1];/*更新cost[W]*/
					path[W] = V; /* 更新S到W的路径 */
				}
				else if ((dist[V] + Graph->G[V][W][0] == dist[W])
					&& (cost[V] + Graph->G[V][W][1] < cost[W]))
					/*路径一样长但是花销更少*/
					cost[W] = cost[V] + Graph->G[V][W][1];
			}
	}
	return true; 
}
