#include<stdio.h>
#define MaxSize 10001
typedef int SetType[MaxSize];
/*定义与SetType相同类型和大小的数组*/
void Initialization(SetType S, int N);
void Input_connect(SetType S);
int Find(SetType S, int n);
void Union(SetType S, int root1, int root2);
void Check_connect(SetType S);
void Check_network(SetType S, int N);
int main()
{
	SetType S;/*S集合*/
	int N;
	char a;
	scanf("%d\n", &N);
	Initialization(S, N);
	do {
		scanf("%c", &a, 1);
		switch (a) {
		case 'I':Input_connect(S);
			break;
		case 'C':Check_connect(S);
			break;
		case 'S':Check_network(S,N);
			break;
		}
	} while (a != 'S');
	return 0;

}
void Initialization(SetType S, int N)
{
	int i;
	for (i = 0;i < N;i++)
		S[i] = -1;
}
void Input_connect(SetType S)
{
	int u, v;
	int root1, root2;
	scanf("%d %d\n", &u, &v);
	root1 = Find(S, u-1);
	root2 = Find(S, v-1);
	if (root1 != root2)
		Union(S, root1, root2);

}
int Find(SetType S, int n)
{
	/*
	for (;S[n] >= 0;n = S[n]);
	return n;
	*/
	/*路径压缩*/
	if (S[n] < 0)
		return n;
	else
		return S[n] = Find(S, S[n]);
	
}
void Union(SetType S, int root1, int root2)
{
	if (root2 < root1) {
		//root2高
		S[root2] += S[root1];
		S[root1] = root2;
	}
	else {
		S[root1] += S[root2];
		S[root2] = root1;
	}
}
void Check_connect(SetType S)
{
	int u, v;
	scanf("%d %d\n", &u, &v);
	int root1, root2;
	root1 = Find(S, u-1);
	root2 = Find(S, v-1);
	if (root1 == root2)
		printf("yes\n");
	else
		printf("no\n");
}
void Check_network(SetType S, int N)
{
	int i, count=0;
	for (i = 0;i < N;i++) {
		if (S[i] < 0)
			count++;
	}
	if (count == 1)
		printf("The network is connected.\n");
	else
		printf("There are %d components.\n", count);
}
