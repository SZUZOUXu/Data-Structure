#include<stdio.h>
#include<stdlib.h>

#define MaxSize 1000
#define INF 65535

typedef struct GNode* MGraph;
struct GNode {
	int Nv;
	int Ne;
	int G[MaxSize][MaxSize];
};

typedef struct ENode* Edge;
struct ENode {
	int V1, V2;
	int Weight;
};

MGraph CreateGraph(int Nv);
MGraph BuildGraph();
void InsertGraph(MGraph Graph, Edge E);
void initDist();
int FindMinDist(MGraph Graph);
int Prim(MGraph Graph);

int dist[MaxSize];

int main()
{
	MGraph Graph;
	Graph = BuildGraph();
	initDist();
	printf("%d", Prim(Graph));

	return 0;
}

MGraph CreateGraph(int Nv)
{
	MGraph Graph;
	int V, W;
	Graph = (MGraph)malloc(sizeof(struct GNode));
	Graph->Nv = Nv;
	Graph->Ne = 0;

	for (V = 0;V < Graph->Nv;V++)
		for (W = 0;W < Graph->Nv;W++)
			Graph->G[V][W] = INF;
		
	return Graph;
}

MGraph BuildGraph()
{
	MGraph Graph;
	Edge E;
	int N, i;
	scanf("%d", &N);
	Graph = CreateGraph(N);
	scanf("%d", &Graph->Ne);

	for (i = 0;i < Graph->Ne;i++) {
		E = (Edge)malloc(sizeof(struct ENode));
		scanf("%d %d %d", &E->V1, &E->V2, &E->Weight);
		InsertGraph(Graph, E);
	}
	return Graph;
}

void InsertGraph(MGraph Graph, Edge E)
{
	E->V1--;
	E->V2--;
	Graph->G[E->V1][E->V2] = E->Weight;
	Graph->G[E->V2][E->V1] = E->Weight;
}

void initDist()
{
	int i;
	for (i = 0; i < MaxSize; ++i) {
		dist[i] = INF;
	}
}

int FindMinDist(MGraph Graph)

{
	int MinV, V;
	int MinDist = INF;

	for (V = 0;V < Graph->Nv;V++) {/*结点未收录且更小*/
		if (dist[V] != 0 && dist[V] < MinDist) {
			MinV = V;
			MinDist = dist[V];
		}
	}

	if (MinDist < INF)
		return MinV;
	else return -1;
}

int Prim(MGraph Graph)
{
	int sum=0, count=1, i;
	int V, W;

	/*遍历0结点的邻接点*/
	for (i = 0;i < Graph->Nv;i++)
		dist[i] = Graph->G[0][i];

	dist[0] = 0;

	while (1) {
		V = FindMinDist(Graph);/*未收录顶点中dist最小*/
		if (V == -1)/*这样的V不存在*/
			break;
		sum += dist[V];
		dist[V] = 0;/*收录V,V到这棵树的距离为0*/
		count++;
		for (W = 0;W < Graph->Nv;W++) {/*对于图中V的每个邻接点*/
			if (dist[W] != 0 && Graph->G[V][W] < dist[W]) {
				if (Graph->G[V][W] < 0)
					return -1;
				dist[W] = Graph->G[V][W];/*V->W的边*/
			}
		}
	}
	if (count < Graph->Nv)
		sum = -1;

	return sum;
}
