#include<stdio.h>
#include<stdlib.h>
#define MAXN 1001

int compare(const void* a, const void* b);
void Output(int T[], int n);
int GetLevel(int n);/*获取有n个结点的完全二叉树的层数*/
int GetSum(int level);/*获取一个n层的满二叉树的总结点数*/
int GetLevelSum(int level);/*获取一个满二叉树第n层结点的个数*/
int GetLeftLength(int n);/*获取一个含有n个结点的完全二叉树的左子树的节点数*/
/*递归求解*/
void solve(int input[], int tree[], int inputLeft, int inputRight, int treeRoot);


int main(void) {
	int n, input[MAXN], tree[MAXN];
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &input[i]);
	}
	//对输入序列按从大到小的顺序排序
	qsort(input, n, sizeof(int),compare);
	//递归求解
	solve(input, tree, 0, n - 1, 0);
	Output(tree, n);
	return 0;
}
int compare(const void* a, const void* b)
/*参数列表是两个空指针,要指向我的类型*/
{
	/*小到大排序*/
	return *(int*)a - *(int*)b;/*取值*/
}

void Output(int T[], int n)
{
	for (int i = 0; i < n; i++) {
		if (i == 0) printf("%d", T[i]);
		else printf(" %d", T[i]);
	}
	printf("\n");
}

int GetLevel(int n)/*获取有n个结点的完全二叉树的层数*/
{
	int count = 0;
	while (n) {
		count++;
		n /= 2;/*完全二叉树的性质 1 3 7(2^n-1)*/
	}
	return count;
}
int GetSum(int level)/*获取一个n层的满二叉树的总结点数*/
{
	if (level < 1) return 0;
	int sum = 1;
	for (int i = 0; i < level; i++) 
		sum *= 2;
	return --sum;/*2^n-1*/
}

int GetLevelSum(int level)/*获取一个满二叉树第n层结点的个数*/
{
	if (level < 1) return 0;
	int sum = 1;
	for (int i = 0; i < level - 1; i++) 
		sum *= 2;
	return sum;/*2^(n-1)*/
}
int GetLeftLength(int n)/*获取一个含有n个结点的完全二叉树的左子树的节点数*/
{
	int Level = GetLevel(n), sum = 0;/*Level为该树的层数*/
	sum += GetSum(Level - 2);/*获得前左子树除最后一层的结点数*/
	/*若比该层满结点的一半少，就是该值，反之就是该层满结点的一半*/
	sum += (n - GetSum(Level - 1) < GetLevelSum(Level) / 2) ? n - GetSum(Level - 1) : GetLevelSum(Level) / 2;
	return sum;
}
void solve(int input[], int tree[], int inputLeft, int inputRight, int treeRoot)
{/*一开始输入的为0 n-1,表示该树的左右坐标*/
	int n = inputRight - inputLeft + 1, L, leftTreeRoot, rightTreeRoot;
	if (n == 0) 
		return;
	L = GetLeftLength(n);/*左子树结点数*/
	tree[treeRoot] = input[inputLeft + L];/*tree[0]=6,每次左边界+左子树的值*/
	/*中序遍历*/
	leftTreeRoot = treeRoot * 2 + 1;
	rightTreeRoot = leftTreeRoot + 1;
	/*左子树的根结点*/
	solve(input, tree, inputLeft, inputLeft + L - 1, leftTreeRoot);
	/*右子树的根节点*/
	solve(input, tree, inputLeft + L + 1, inputRight, rightTreeRoot);

}
