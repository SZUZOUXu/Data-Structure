#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<stdbool.h>

#define KEYLENGTH 11
#define MAXD 5/*哈希函数取后五位*/
#define MaxSize 1000000
typedef char ElementType[KEYLENGTH + 1];
typedef struct LNode* PtrToNode;
typedef PtrToNode List;
struct LNode {
	ElementType Data;
	List Next;
	int Count;
};

typedef struct TblNode* HashTable;
struct TblNode {
	int TableSize;
	List Heads;
};

HashTable CreateHashTable(int N);
int NextPrime(int N);
bool Insert(HashTable H, ElementType Key);
List Find(HashTable H, ElementType Key);
int Hash(int N, int TableSize);
void ScanAndOutput(HashTable H);
void DestoryHash(HashTable H);
int main()
{
	int N, i;
	ElementType Key;/*输入的电话*/
	HashTable H;
	scanf("%d", &N);

	H = CreateHashTable(2 * N);
	for (i = 0;i < N;i++) {
		scanf("%s", Key);
		Insert(H, Key);
		scanf("%s", Key);
		Insert(H, Key);
	}
	ScanAndOutput(H);
	DestoryHash(H);

	return 0;
}

HashTable CreateHashTable(int N)
{
	int i;
	HashTable H;
	H = (HashTable)malloc(sizeof(struct TblNode));
	H->TableSize = NextPrime(N);
	H->Heads = (List)malloc(H->TableSize * sizeof(struct LNode));

	for (i = 0;i < H->TableSize;i++) {
		H->Heads[i].Data[0] = '\0';
		H->Heads[i].Next = NULL;
		H->Heads[i].Count = 0;
	}
	return H;
}

int NextPrime(int N)
{
	int i;
	int p = (N % 2) ? N + 2 : N + 1;/*下一个奇数*/
	while (p < MaxSize) {
		for (i = (int)sqrt(p);i > 2;i--) {
			if (p % i == 0)/*不是素数*/
				break;
		}
		if (i == 2)/*是素数*/
			break;
		else p += 2;/*继续往后面找*/
	}
	return p;
}

bool Insert(HashTable H, ElementType Key)
{
	List P, NewCell;
	int pos;
	P = Find(H, Key);
	if (!P) {/*P为空*/
		NewCell = (List)malloc(sizeof(struct LNode));
		NewCell->Count = 1;
		strcpy(NewCell->Data, Key);
		pos = Hash(atoi(Key + KEYLENGTH - MAXD), H->TableSize);
		NewCell->Next = H->Heads[pos].Next;/*插在头结点*/
		H->Heads[pos].Next = NewCell;

		return true;
	}
	else {
		/*已经存过了这个号码*/
		P->Count++;
		return false;
	}
}

List Find(HashTable H, ElementType Key)
{
	List P;
	int pos;/*哈希函数计算后KEY存储的位置*/
	pos = Hash(atoi(Key + KEYLENGTH - MAXD), H->TableSize);
	P = H->Heads[pos].Next;
	while (P && strcmp(P->Data, Key))
		P = P->Next;

	return P;/*此时P为NULL或要找的结点*/
}

int Hash(int N, int TableSize)
{/*除留余数法散列函数*/
	return N % TableSize;
}

void ScanAndOutput(HashTable H)
{
	int PCnt = 0;/*狂人数量*/
	int MaxCnt = 0;/*最大*/
	int i;
	List Ptr;/*用于遍历链表*/
	ElementType MinPhone;
	MinPhone[0] = '\0';
	for (i = 0;i < H->TableSize;i++) {
		Ptr = H->Heads[i].Next;
		while (Ptr) {
			if (Ptr->Count > MaxCnt) {
				MaxCnt = Ptr->Count;
				strcpy(MinPhone, Ptr->Data);
				PCnt = 1;
			}
			else if (Ptr->Count == MaxCnt) {
				PCnt++;
				if (strcmp(Ptr->Data, MinPhone)<0)/*MinPhone的值更大*/
					strcpy(MinPhone, Ptr->Data);
			}
			Ptr = Ptr->Next;
		}
	}
	printf("%s %d", MinPhone, MaxCnt);
	if (PCnt > 1) {
		printf(" %d", PCnt);
	}
	printf("\n");
}

void DestoryHash(HashTable H)
{
	int i;
	List P, Tmp;
	for (i = 0;i < H->TableSize;i++) {
		P = H->Heads[i].Next;
		while (P) {
			Tmp = P->Next;
			free(P);
			P = Tmp;
		}
	}
	free(H->Heads);
	free(H);
}
