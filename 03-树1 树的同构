#include<stdio.h>
#include<stdlib.h>
#define MaxTree 100
#define ElementType char
#define Tree int
#define Null -1

struct TreeNode {
	ElementType Element;
	Tree Left;
	Tree Right;
}T1[MaxTree],T2[MaxTree];

Tree BuildTree(struct TreeNode T[]);
Tree Isomorphic(Tree R1, Tree R2);
int main()
{
	Tree R1,R2;
	R1 = BuildTree(T1);/*返回树根*/
	R2 = BuildTree(T2);
	if (Isomorphic(R1, R2))
		printf("Yes\n");
	else
		printf("No\n");
	return 0;
}

Tree BuildTree(struct TreeNode T[])
{
	/*没有任何指针指向的就是根结点*/
	
	int N, i, Root=Null;
	char cl, cr;
	scanf("%d", &N);
	int check[MaxTree];
	if (N) {
		for (i = 0;i < N;i++) {
			check[i] = 0;/*初始化数组均为0*/
		}
		for (i = 0;i < N;i++) {
			scanf("\n%c %c %c", &T[i].Element, &cr, &cl);
			if (cl != '-') {
				T[i].Left = cl - '0';/*转换为int类型*/
				check[T[i].Left] = 1;/*被指向的元素改为1*/
			}
			else {
				T[i].Left = Null;
			}
			if (cr != '-') {
				T[i].Right = cr - '0';/*转换为int类型*/
				check[T[i].Right] = 1;/*被指向的元素改为1*/
			}
			else {
				T[i].Right = Null;
			}
		}
		/*找到根结点*/
		for (i = 0;i < N;i++) {
			if (!check[i]) {/*check值唯一为0*/
				break;
			}
		}
		Root = i;
	}
	
	return Root;
}

Tree Isomorphic(Tree R1, Tree R2)
{
	if (R1 == Null && R2 == Null)
		/*两棵树均为空，认为同构*/
		return 1;
	if ((R1 == Null && R2 != Null) || (R1 != Null && R2 == Null))
		/*一棵空一棵有*/
		return 0;
	if (T1[R1].Element != T2[R2].Element)
		/*根结点都不一样*/
		return 0;

	if ((T1[R1].Left == Null) && (T2[R2].Left == Null))
		/*左子树为空就比较右子树*/
		return Isomorphic(T1[R1].Right, T2[R2].Right);

	if(((T1[R1].Left!=Null)&& T2[R2].Left != Null)&&
		((T1[T1[R1].Left].Element)==(T2[T2[R2].Left].Element)))
		/*二者左子树不空且左子树的值相等*/
		return (Isomorphic(T1[R1].Left,T2[R2].Left) && 
			Isomorphic(T1[R1].Right, T2[R2].Right));

	else/*比较两边的左右子树*/
		return (Isomorphic(T1[R1].Left, T2[R2].Right) &&
			Isomorphic(T1[R1].Right, T2[R2].Left));

}
