#include<stdio.h>
#include<stdlib.h>
#define MaxSize 100

void Input(int A[], int A1[], int B[], int B1[], int N);
void Insert_Judge(int A1[], int N, int B[], int* flag);/*判断是Insert还是Merge*/
void Insert_Sort(int B[], int N, int B1[]);/*一次迭代Insert_Sort*/
void Heap_Sort(int B[], int N, int B1[]);/*一次迭代Merge_Sort*/
void PercDown(int B[], int p, int N);

int main()
{
	int A[MaxSize];/*存储输入迭代前的元素*/
	int B[MaxSize];/*存储输入迭代后的元素*/
	int B1[MaxSize];/*用于再迭代一次B*/
	int A1[MaxSize];/*用于判别是Inser还是Merge*/
	int N, i;
	int flag = 0;
	scanf("%d", &N);
	Input(A, A1, B, B1, N);/*输入*/
	/*对A1数组进行Insert迭代,在A1和B相等时返回*/
	Insert_Judge(A1, N, B, &flag);
	if (flag) {
		printf("Heap Sort\n");
		Heap_Sort(A, N, B1);
		for (i = 0;i < N;i++) {/*输出*/
			if (!i)
				printf("%d", A[i]);
			else
				printf(" %d", A[i]);
		}
	}
	else {
		printf("Insertion Sort\n");
		Insert_Sort(B, N, B1);
		for (i = 0;i < N;i++) {/*输出*/
			if (!i)
				printf("%d", B[i]);
			else
				printf(" %d", B[i]);
		}
	}
	return 0;
}
void Input(int A[], int A1[], int B[], int B1[], int N)
{
	int i;
	for (i = 0;i < N;i++) {
		scanf("%d", &A[i]);
		A1[i] = A[i];
	}

	for (i = 0;i < N;i++) {
		scanf("%d", &B[i]);
		B1[i] = B[i];
	}
}

void Insert_Judge(int A1[], int N, int B[], int* flag)
{
	int P, i, tmp;
	for (P = 1;P < N;P++) {
		*flag = 0;
		tmp = A1[P];
		for (i = P;i > 0 && A1[i - 1] > tmp;i--) {
			A1[i] = A1[i - 1];
		}
		A1[i] = tmp;
		for (i = 0;i < N;i++) {
			if (A1[i] != B[i]) {
				*flag = 1;
			}
		}
		if (!(*flag))
			break;
	}
}
void Insert_Sort(int B[], int N, int B1[])
{/*完成一次迭代*/
	int flag;
	int P, i, tmp;
	for (P = 1;P < N;P++) {
		flag = 0;
		tmp = B[P];
		for (i = P;i > 0 && B[i - 1] > tmp;i--) {
			B[i] = B[i - 1];
		}
		B[i] = tmp;
		for (i = 0;i < N;i++) {
			if (B[i] != B1[i]) {
				flag = 1;
			}
		}
		if (flag)
			break;
	}
}

void Heap_Sort(int B[], int N, int B1[])
{
	int i, tmp, j;
	int flag;
	for (i = N / 2;i >= 0;i--) {
		PercDown(B, i, N);
	}
	for (i = N-1;i >0;i--) {
		flag = 0;
		tmp = B[0];
		B[0] = B[i];
		B[i] = tmp;
		PercDown(B, 0, i);
		for (j = 0;j < N;j++) {
			if (B[i] != B1[i])
				flag = 1;
		}
		if (flag) {
			/*此时二者一样,再走一轮*/
			
			break;
		}
	}
}
void PercDown(int B[], int p, int N)
{
	int Parent, Child;
	int X = B[p];
	for (Parent = p;2 * Parent + 1 < N;Parent = Child) {
		Child = 2 * Parent + 1;
		if (Child + 1 < N && B[Child] < B[Child + 1])
			Child++;
		if (X >= B[Child])
			break;
		else
			B[Parent] = B[Child];
	}
	B[Parent] = X;
}
