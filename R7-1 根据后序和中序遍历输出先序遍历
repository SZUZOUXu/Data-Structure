#include<stdio.h>

int PostOrder[30];
int InOrder[30];
int PreOrder[30];

void solve(int PreL, int InL, int PostL, int N);

int main()
{
	int N, i;
	scanf("%d", &N);
	for (i = 0;i < N;i++) {
		scanf("%d", &PostOrder[i]);
	}
	for (i = 0;i < N;i++) {
		scanf("%d", &InOrder[i]);
	}
	solve(0, 0, 0, N);

	printf("Preorder:");
	for (i = 0;i < N;i++) {
		printf(" %d", PreOrder[i]);
	}
	return 0;
}

void solve(int PreL, int InL, int PostL, int N)
{/*先序左侧，中序左侧，后序右侧*/
	if (N == 0)
		return;
	if (N == 1) {
		PreOrder[PreL] = PostOrder[N + PostL - 1];
		return;
	}
	int i;
	int Root = PostOrder[N+ PostL-1];/*根节点为后序右侧*/
	PreOrder[PreL] = Root;/*先序左侧为Root*/
	/*找到中序的根节点*/
	for (i = 0;i < N;i++) {
		if (InOrder[InL+i] == Root)
			break;
	}
	/*递归解决左侧和右侧*/
	int L, R;
	L = i;/*左子树长度*/
	R = N - i - 1;/*右子树长度*/

	solve(PreL + 1, InL, PostL, L);
	solve(PreL + 1 + L, InL + L + 1, PostL + L, R);
}
