#include<stdio.h>
#include<stdlib.h>
#define MaxSize 10

struct TreeNode {
	int left;
	int right;
}T[MaxSize];

/*记录树的数组中节点的下标*/
struct QueueNode {
	int* trees;/*存放下标*/
	int front;
	int rear;
};
typedef struct QueueNode* Queue;
typedef struct TreeNode BinTree;


int BuildTree(BinTree T[],int n);
Queue CreateQueue();/*初始化队列*/
void AddQueue(Queue q ,int x);/*x入队*/
int DeleteQueue(Queue q);/*出队*/
void TraverseTree(int top,int n);/*根节点，层序遍历(队列)*/

int main()
{
	int R1;
	int n;
	scanf("%d", &n);
	R1 = BuildTree(T,n);
	TraverseTree(R1,n);
	return 0;
}

int BuildTree(BinTree T[], int n)
{
	int i;
	int root = -1;/*根结点的值*/
	char cl, cr;
	int check[MaxSize];
	for (i = 0;i < MaxSize; i++) {
		check[i] = 0;
	}
	for (i = 0;i < n;i++) {
		scanf("\n%c %c", &cl, &cr);
		if (cl != '-') {
			T[i].left = cl - '0';/*赋值*/
			check[T[i].left] = 1;/*有指向的就不是根*/
		}
		else {
			T[i].left = -1;
		}
		if (cr != '-') {
			T[i].right = cr - '0';/*赋值*/
			check[T[i].right] = 1;/*有指向的就不是根*/
		}
		else {
			T[i].right= -1;
		}
	}
	for (i = 0;i < MaxSize; i++) {
		if (!check[i]) {
			break;
		}
	}
	return i;
}

Queue CreateQueue()
{
	Queue Q;
	Q = (Queue)malloc(sizeof(struct QueueNode));
	Q->trees= (int*)malloc(MaxSize * sizeof(int));
	Q->front = Q->rear = -1;
	return Q;
}

void AddQueue(Queue q ,int x)
{
	
	/*判断队列是否已经满了*/
	if ((q->rear + 1) % MaxSize == q->front) {
		/*q->rear与q->front相等--满了,因为我们只用n-1个元素*/
		return;
	}
	else {
		q->rear = (q->rear + 1) % MaxSize;
		q->trees[q->rear] = x;/*元素入队*/
	}
}

int DeleteQueue(Queue q)
{
	if (q->rear == q->front) {
		/*空队列*/
		return -1;
	}
	else {
		q->front = (q->front + 1) % MaxSize;
		return q->trees[q->front];
		/*返回的是弹出的trees[]存储的元素*/
	}
}

void TraverseTree(int top,int n)
{
	int i, num=0;
	if (top == -1) {
		return -1;
	}

	Queue q = CreateQueue();
	AddQueue(q, top);/*根节点入队*/
	while (q->front != q->rear)/*队列不为空*/
	{
		num++;/*记录遍历的节点数*/
		i = DeleteQueue(q);/*弹出栈顶元素*/
		if (T[i].left != -1 && T[i].right != -1) {
			/*弹出的结点的左右子树都不为空*/
			AddQueue(q, T[i].left);
			AddQueue(q, T[i].right);
		}
		else if (T[i].left != -1 && T[i].right == -1) { //左孩子存在 右不存在
			AddQueue(q, T[i].left);
		}
		else if (T[i].left == -1 && T[i].right != -1) { //左孩子不存在 有孩子存在
			AddQueue(q, T[i].right);
		}
		else {
			//左右孩子都不存在
			if (num != n)
				printf("%d ", i);
			else
				printf("%d", i);
		}

		
	}
}
