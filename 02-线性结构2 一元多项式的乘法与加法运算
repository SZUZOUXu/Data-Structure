#include<stdio.h>
#include<stdlib.h>

typedef struct PolyNode* Polynomial;
struct PolyNode {
	int coef;
	int expon;
	Polynomial link;
};
/*返回的都是链表的头指针*/
Polynomial ReadPoly();/*读入多项式*/
Polynomial Mult(Polynomial P1, Polynomial P2);/*相乘*/
Polynomial Add(Polynomial P1, Polynomial P2);/*相加*/
void PrintPoly(Polynomial P);/*打印*/
void Attach(int c, int e, Polynomial* rear);/*链接*/
int Compare(int a, int b);

int main()
{
	Polynomial P1, P2, PP, PS;

	P1 = ReadPoly();
	P2 = ReadPoly();
	PP = Mult(P1, P2);
	PrintPoly(PP);
	PS = Add(P1, P2);
	PrintPoly(PS);

	return 0;
}

Polynomial ReadPoly()
{
	Polynomial P, rear, t;
	int c, e, N;

	scanf("%d", &N);
	/*创建链表头空结点P*/
	P = (Polynomial)malloc(sizeof(struct PolyNode));
	P->link = NULL;
	rear = P;/*rear指向这个空结点,rear是尾结点*/
	while (N--) {
		scanf("%d %d", &c, &e);
		Attach(c, e, &rear);
	}
	/*删除临时空结点*/
	t = P;
	P = P->link;
	free(t);
	return P;
}

Polynomial Mult(Polynomial P1, Polynomial P2)
{
	Polynomial P, Rear, t1, t2, t;
	int c, e;
	t1 = P1;
	t2 = P2;
	if (!P1 || !P2)//P1不存在或者P2不存在
		return NULL;
	/*空结点并让Rear指向*/
	P = (Polynomial)malloc(sizeof(struct PolyNode));
	P->link = NULL;
	Rear = P;
	while (t2) {/*用P1的第一项乘以P2，得到P*/
		Attach(t1->coef * t2->coef, t1->expon + t2->expon, &Rear);
		t2 = t2->link;
	}

	/*得要有一个链表P，才能后续进行比较，插入*/
	t1 = t1->link;
	while (t1) {
		t2 = P2;/*重置t2*/
		Rear = P;
		while (t2) {
			e = t1->expon + t2->expon;
			c = t1->coef * t2->coef;
			/*判断Rear的下一项的e和要插入的e的大小*/
			/*一开始Rear是空结点*/
			while (Rear->link && Rear->link->expon > e) {
				Rear = Rear->link;/*找到合适的位置*/
			}/*此时应该插入在Rear的后面*/
			if (Rear->link &&  Rear->link->expon == e) {
				/*系数相加，不用申请新结点*/
				if (Rear->link->coef + c) {//值相加不为0的情况
					Rear->link->coef += c;/*Rear下一项相加*/
				}
				else {
					t = Rear->link;/*指向要释放的结点*/
					Rear->link = t->link;
					free(t);
				}
			}
			else {/*此时插入新结点*/
				t = (Polynomial)malloc(sizeof(struct PolyNode));
				t->coef = c;
				t->expon = e;
				t->link = Rear->link;
				Rear->link = t;
				Rear = Rear->link;/*Rear向后走一个*/
			}
			t2 = t2->link;
		}
		t1 = t1->link;
	}
	t2 = P;/*把空的那个删了*/
	P = P->link;
	free(t2);

	return P;
}


Polynomial Add(Polynomial P1, Polynomial P2)
{
	Polynomial front, rear, temp;
	int sum;
	rear = (Polynomial)malloc(sizeof(struct PolyNode));
	front = rear;
	while (P1 && P2)
		switch (Compare(P1->expon, P2->expon)) {
		case 1:/*P1比较大*/
			Attach(P1->coef, P1->expon, &rear);
			P1 = P1->link;
			break;
		case -1:/*P2比较大*/
			Attach(P2->coef, P2->expon, &rear);
			P2 = P2->link;
			break;
		case 0:/*一样大*/
			sum = (P1->coef + P2->coef);
			if (sum)/*不是0*/
				Attach(sum, P1->expon, &rear);
			P1 = P1->link;
			P2 = P2->link;
			break;
		}
	/*此时已经有一个多项式没了，因此将剩余项加在新多项式上*/
	for (;P1;P1=P1->link)
		Attach(P1->coef, P1->expon, &rear);
	for (;P2;P2=P2->link)
		Attach(P2->coef, P2->expon, &rear);
	rear->link = NULL;//尾指针
	temp = front;
	front = front->link;/*front指向第一个非0项*/
	free(temp);
	return front;
}

void PrintPoly(Polynomial P)	//把链表以数字的形式输出
{ 
	if(!P)
	{
		printf("0 0");
	}
	while(P)
	{
		printf("%d %d",P->coef,P->expon);
		P=P->link;
		if(P)		//只有在指针域不为NULL时，才输出空格间隔开每个多项式。即在多项式末位没有空格
		{
			printf(" ");
		}
	}
	printf("\n");
}


void Attach(int c, int e, Polynomial* rear)/*rear 指针的指针*/
{/*采用空结点的方式(还有一种是把rear设为NULL)*/
	Polynomial P;
	P = (Polynomial)malloc(sizeof(struct PolyNode));
	P->coef = c;
	P->expon = e;
	P->link = NULL;
	(*rear)->link = P;/*rear指向链表的最后一个结点*/
	(*rear) = P;/*修改rear的地址,往后走一个*/
}
int Compare(int a, int b)
{
	if (a > b)
		return 1;
	else if (a < b)
		return -1;
	else if (a == b)
		return 0;
}
